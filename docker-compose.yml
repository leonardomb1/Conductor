services:
  database:
    image: 'postgres:latest'
    hostname: conductor-db
    ports:
      - ${DB_FORWARED_PORT_NUMBER}:5432
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - conductor-network
    volumes:
      - ${PWD}/db/:/var/lib/postgresql/data/
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 3s
      timeout: 5s
      retries: 5

  api:
    image: conductor-api:0.0.3-${DOCKER_ENVIRONMENT}
    hostname: conductor-api
    build:
      context: .
      dockerfile: docker/${DOCKER_ENVIRONMENT}/Dockerfile
    env_file:
      - .env
    environment:
      # Database Configuration
      CONNECTION_STRING: Server=conductor-db;Port=5432;Database=${POSTGRES_DB};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      DB_TYPE: ${DB_TYPE}
      
      # Server Configuration
      PORT_NUMBER: ${PORT_NUMBER}
      SPLITTER_CHAR: ${SPLITTER_CHAR}
      ENCRYPT_KEY: ${ENCRYPT_KEY}
      SESSION_TIME_SEC: ${SESSION_TIME_SEC}
      API_KEY: ${API_KEY}
      NODES: ${NODES}
      
      # Pipeline Configuration
      MAX_DEGREE_PARALLEL: ${MAX_DEGREE_PARALLEL}
      MAX_CONSUMER_FETCH: ${MAX_CONSUMER_FETCH}
      MAX_PIPELINE_ATTEMPT: ${MAX_PIPELINE_ATTEMPT}
      MAX_PRODUCER_LINECOUNT: ${MAX_PRODUCER_LINECOUNT}
      MAX_FETCHING_LINECOUNT: ${MAX_FETCHING_LINECOUNT}
      PIPELINE_BACKOFF_BASE_MS: ${PIPELINE_BACKOFF_BASE_MS}
      QUERY_TIMEOUT_SEC: ${QUERY_TIMEOUT_SEC}
      
      # LDAP Configuration
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      LDAP_SERVER: ${LDAP_SERVER}
      LDAP_PORT: ${LDAP_PORT}
      LDAP_BASEDN: ${LDAP_BASEDN}
      LDAP_GROUPDN: ${LDAP_GROUPDN}
      LDAP_GROUPS: ${LDAP_GROUPS}
      LDAP_SSL: ${LDAP_SSL}
      LDAP_VERIFY_CERTIFICATE: ${LDAP_VERIFY_CERTIFICATE}
      
      # Security & Authentication
      USE_HTTPS: ${USE_HTTPS}
      REQUIRE_AUTHENTICATION: ${REQUIRE_AUTHENTICATION}
      VERIFY_TCP: ${VERIFY_TCP}
      VERIFY_CORS: ${VERIFY_CORS}
      CERTIFICATE_PASSWORD: ${CERTIFICATE_PASSWORD}
      CERTIFICATE_PATH: ${CERTIFICATE_PATH}
      ENCRYPT_INDICATOR_BEGIN: ${ENCRYPT_INDICATOR_BEGIN}
      ENCRYPT_INDICATOR_END: ${ENCRYPT_INDICATOR_END}
      ADMIN_LOGIN: ${ADMIN_LOGIN}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # Network & CORS Configuration
      ALLOWED_IP_ADDRESSES: ${ALLOWED_IP_ADDRESSES}${SPLITTER_CHAR}${DOCKER_NETWORK_IP_ADDRESS_SUBNET}
      ALLOWED_CORS: ${ALLOWED_CORS}
      
      # Server Limits & Performance
      CONNECTION_TIMEOUT_MIN: ${CONNECTION_TIMEOUT_MIN}
      MAX_CONCURRENT_CONNECTIONS: ${MAX_CONCURRENT_CONNECTIONS}
      RESPONSE_CACHING_LIMIT_MB: ${RESPONSE_CACHING_LIMIT_MB}
      
      # Data Export Configuration
      CSV_OUTPUT_PATH: ${CSV_OUTPUT_PATH}
      
      # Logging & Monitoring
      DEVELOPMENT_MODE: ${DEVELOPMENT_MODE}
      LOGGING_LEVEL_DEBUG: ${LOGGING_LEVEL_DEBUG}
      SEND_WEBHOOK_ON_ERROR: ${SEND_WEBHOOK_ON_ERROR}
      WEBHOOK_URI: ${WEBHOOK_URI}
      
      # Connection Pool Configuration
      CONNECTION_POOL_MAX_SIZE: ${CONNECTION_POOL_MAX_SIZE}
      CONNECTION_POOL_MIN_SIZE: ${CONNECTION_POOL_MIN_SIZE}
      CONNECTION_IDLE_TIMEOUT_MINUTES: ${CONNECTION_IDLE_TIMEOUT_MINUTES}
      
      # Memory Management Configuration
      DATATABLE_LIFETIME_MINUTES: ${DATATABLE_LIFETIME_MINUTES}
      DATATABLE_CLEANUP_INTERVAL_MINUTES: ${DATATABLE_CLEANUP_INTERVAL_MINUTES}
      GC_CHECK_INTERVAL_MINUTES: ${GC_CHECK_INTERVAL_MINUTES}
      MEMORY_PRESSURE_THRESHOLD_GB: ${MEMORY_PRESSURE_THRESHOLD_GB}
      MEMORY_PRESSURE_FORCE_GC_MULTIPLIER: ${MEMORY_PRESSURE_FORCE_GC_MULTIPLIER}
      DATATABLE_DISPOSE_TIMEOUT_SECONDS: ${DATATABLE_DISPOSE_TIMEOUT_SECONDS}
      
      # Memory Estimation Configuration
      DATATABLE_COLUMN_OVERHEAD_BYTES: ${DATATABLE_COLUMN_OVERHEAD_BYTES}
      DATATABLE_ROW_OVERHEAD_BYTES: ${DATATABLE_ROW_OVERHEAD_BYTES}
      DATATABLE_STRUCTURE_OVERHEAD_BYTES: ${DATATABLE_STRUCTURE_OVERHEAD_BYTES}
      DEFAULT_STRING_ESTIMATE_BYTES: ${DEFAULT_STRING_ESTIMATE_BYTES}
      DEFAULT_BYTE_ARRAY_ESTIMATE_BYTES: ${DEFAULT_BYTE_ARRAY_ESTIMATE_BYTES}
      DEFAULT_TYPE_ESTIMATE_BYTES: ${DEFAULT_TYPE_ESTIMATE_BYTES}
      STRING_ESTIMATE_SAMPLE_SIZE: ${STRING_ESTIMATE_SAMPLE_SIZE}
      BYTE_ARRAY_ESTIMATE_SAMPLE_SIZE: ${BYTE_ARRAY_ESTIMATE_SAMPLE_SIZE}
      MIN_STRING_ESTIMATE_BYTES: ${MIN_STRING_ESTIMATE_BYTES}
      ENABLE_ACCURATE_MEMORY_CALCULATION: ${ENABLE_ACCURATE_MEMORY_CALCULATION}
      
      # File Stream Configuration
      FILE_STREAM_BUFFER_SIZE: ${FILE_STREAM_BUFFER_SIZE}
      
    volumes:
      - ${HOST_EXPORT_PATH}:${CSV_OUTPUT_PATH}
      - ${PWD}/certs:/app/certs
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://conductor-api:${PORT_NUMBER}/api/health -H 'Authorization: Key ${API_KEY}' || exit 1"]
      interval: 200s
      timeout: 5s
      retries: 5
    networks:
      - conductor-network
    ports:
      - "${API_FORWARDED_PORT_NUMBER}:${PORT_NUMBER}"

  frontend:
    image: conductor-frontend:0.0.3-${DOCKER_ENVIRONMENT}
    hostname: conductor-frontend
    build:
      context: .
      dockerfile: docker/${DOCKER_ENVIRONMENT}/frontend/Dockerfile
    env_file:
      - .env
    environment:
      VITE_API_BASE_URL: http://conductor-api:${PORT_NUMBER}/api
      ORIGIN: http://localhost:${FRONTEND_PORT_NUMBER}
      HOST: 0.0.0.0
      PORT: ${FRONTEND_PORT_NUMBER}
    depends_on:
      - api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://conductor-frontend:${FRONTEND_PORT_NUMBER} || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - conductor-network
    ports:
      - "${FRONTEND_FORWARDED_PORT_NUMBER}:${FRONTEND_PORT_NUMBER}"

networks:
  conductor-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_IP_ADDRESS_SUBNET}
          gateway: ${DOCKER_NETWORK_IP_ADDRESS_GATEWAY}
