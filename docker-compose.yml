services:
  database:
    image: 'postgres:latest'
    hostname: conductor-db
    ports:
      - ${DB_FORWARED_PORT_NUMBER}:5432
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - conductor-network
    volumes:
      - ${PWD}/db/:/var/lib/postgresql/data/
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 3s
      timeout: 5s
      retries: 5

  api:
    image: conductor:0.0.3-${DOCKER_ENVIRONMENT}
    hostname: conductor-api
    build:
      context: .
      dockerfile: docker/${DOCKER_ENVIRONMENT}/Dockerfile
    env_file:
      - .env
    environment:
      CONNECTION_STRING: Server=conductor-db;Port=5432;Database=${POSTGRES_DB};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      PORT_NUMBER: ${PORT_NUMBER}
      DB_TYPE: ${DB_TYPE}
      SPLITTER_CHAR: ${SPLITTER_CHAR}
      ENABLE_LOG_DUMP: ${ENABLE_LOG_DUMP}
      LOG_DUMP_TIME_SEC: ${LOG_DUMP_TIME_SEC}
      ENCRYPT_KEY: ${ENCRYPT_KEY}
      SESSION_TIME_SEC: ${SESSION_TIME_SEC}
      MAX_DEGREE_PARALLEL: ${MAX_DEGREE_PARALLEL}
      MAX_CONSUMER_FETCH: ${MAX_CONSUMER_FETCH}
      MAX_PIPELINE_ATTEMPT: ${MAX_PIPELINE_ATTEMPT}
      MAX_PRODUCER_LINECOUNT: ${MAX_PRODUCER_LINECOUNT}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      LDAP_SERVER: ${LDAP_SERVER}
      LDAP_PORT: ${LDAP_PORT}
      LDAP_BASEDN: ${LDAP_BASEDN}
      LDAP_GROUPDN: ${LDAP_GROUPDN}
      LDAP_GROUPS: ${LDAP_GROUPS}
      LDAP_SSL: ${LDAP_SSL}
      LDAP_VERIFY_CERTIFICATE: ${LDAP_VERIFY_CERTIFICATE}
      NODES: ${NODES}
      USE_HTTPS: ${USE_HTTPS}
      ALLOWED_IP_ADDRESSES: ${ALLOWED_IP_ADDRESSES}${SPLITTER_CHAR}${DOCKER_NETWORK_IP_ADDRESS_SUBNET}
      ALLOWED_CORS: ${ALLOWED_CORS}
      DEVELOPMENT_MODE: ${DEVELOPMENT_MODE}
      CONNECTION_TIMEOUT_MIN: ${CONNECTION_TIMEOUT_MIN}
      MAX_CONCURRENT_CONNECTIONS: ${MAX_CONCURRENT_CONNECTIONS}
      RESPONSE_CACHING_LIMIT_MB: ${RESPONSE_CACHING_LIMIT_MB}
      MAX_LOG_QUEUE_SIZE: ${MAX_LOG_QUEUE_SIZE}
      REQUIRE_AUTHENTICATION: ${REQUIRE_AUTHENTICATION}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      VERIFY_TCP: ${VERIFY_TCP}
      VERIFY_HTTP: ${VERIFY_HTTP}
      VERIFY_CORS: ${VERIFY_CORS}
      MAX_QUERY_PARAMS: ${MAX_QUERY_PARAMS}
      CERTIFICATE_PASSWORD: ${CERTIFICATE_PASSWORD}
      CERTIFICATE_PATH: ${CERTIFICATE_PATH}
      ENCRYPT_INDICATOR_BEGIN: ${ENCRYPT_INDICATOR_BEGIN}
      ENCRYPT_INDICATOR_END: ${ENCRYPT_INDICATOR_END}
      API_KEY: ${API_KEY}
      VIRTUAL_TABLE_ID_MAX_LENGHT: ${VIRTUAL_TABLE_ID_MAX_LENGHT}
      PIPELINE_BACKOFF_BASE_MS: ${PIPELINE_BACKOFF_BASE_MS}
      PRODUCER_CONCURRENT_FETCHES: ${PRODUCER_CONCURRENT_FETCHES}
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://conductor-api:${PORT_NUMBER}/api/health -H 'Authorization: Key ${API_KEY}' || exit 1"]
      interval: 200s
      timeout: 5s
      retries: 5
    networks:
      - conductor-network
    ports:
      - "${API_FORWARDED_PORT_NUMBER}:${PORT_NUMBER}"

networks:
  conductor-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_IP_ADDRESS_SUBNET}
          gateway: ${DOCKER_NETWORK_IP_ADDRESS_GATEWAY}